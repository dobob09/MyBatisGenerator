/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bob.mybatisgenerator;

import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Random;
import java.util.Vector;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;

/**
 *
 * @author DuJB
 */
public class MainFrame extends javax.swing.JFrame {

    private static final String BASE_DAO_NAME = "BaseDAO";
    DefaultTableModel model;
    private JFileChooser chooser;
    String url;
    String user;
    String pwd;
    Connection connection = null;
    String title = "";

    static {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setModal(true);
        model = (DefaultTableModel) tbInfo.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jarTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbInfo = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnConnection = new javax.swing.JButton();
        txtPort = new javax.swing.JFormattedTextField();
        txtIP = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDatabaseName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPwd = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtMapper = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDao = new javax.swing.JTextField();
        txtDomain = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnSelectAll = new javax.swing.JButton();
        btnInvertSelect = new javax.swing.JButton();
        btnMake = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtBaseVO = new javax.swing.JTextField();
        btnChooser = new javax.swing.JButton();

        jDialog1.setMinimumSize(new java.awt.Dimension(250, 305));

        jarTree.setShowsRootHandles(true);
        jScrollPane2.setViewportView(jarTree);

        jDialog1.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(10, 30));

        btnOK.setText("确认");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("取消");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(246, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel)))
        );

        jDialog1.getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyBatis生成对象工具");
        setMinimumSize(new java.awt.Dimension(542, 475));
        setResizable(false);
        getContentPane().setLayout(null);

        tbInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "选择", "表名", "表注释"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbInfo);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 270, 470, 160);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(null);

        btnConnection.setText("连接数据库");
        btnConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectionActionPerformed(evt);
            }
        });
        jPanel1.add(btnConnection);
        btnConnection.setBounds(370, 10, 120, 23);

        txtPort.setText("3306");
        jPanel1.add(txtPort);
        txtPort.setBounds(270, 10, 80, 21);

        txtIP.setText("127.0.0.1");
        jPanel1.add(txtIP);
        txtIP.setBounds(80, 10, 100, 21);

        jLabel1.setText("数据库IP");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 10, 60, 15);

        jLabel3.setText("数据库名称");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 40, 70, 15);

        txtDatabaseName.setText("test");
        jPanel1.add(txtDatabaseName);
        txtDatabaseName.setBounds(80, 40, 100, 21);

        jLabel4.setText("帐号");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 70, 40, 15);

        txtUser.setText("root");
        jPanel1.add(txtUser);
        txtUser.setBounds(80, 70, 100, 21);

        jLabel5.setText("密码");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(220, 70, 40, 15);

        txtPwd.setText("123456");
        jPanel1.add(txtPwd);
        txtPwd.setBounds(260, 70, 90, 21);

        jLabel2.setText("端口");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(230, 10, 30, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(20, 10, 500, 100);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(null);

        txtMapper.setText("com.bob.mybatis");
        jPanel2.add(txtMapper);
        txtMapper.setBounds(70, 10, 150, 21);

        jLabel6.setText("Mapper");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 10, 50, 15);

        jLabel8.setText("Dao");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(20, 40, 30, 15);

        txtDao.setText("com.bob.dao");
        jPanel2.add(txtDao);
        txtDao.setBounds(70, 40, 150, 21);

        txtDomain.setText("com.bob.domain");
        jPanel2.add(txtDomain);
        txtDomain.setBounds(300, 10, 150, 21);

        jLabel7.setText("Domain");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(240, 10, 50, 15);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(20, 120, 500, 70);

        btnSelectAll.setText("全选");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });
        getContentPane().add(btnSelectAll);
        btnSelectAll.setBounds(30, 240, 70, 23);

        btnInvertSelect.setText("反选");
        btnInvertSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertSelectActionPerformed(evt);
            }
        });
        getContentPane().add(btnInvertSelect);
        btnInvertSelect.setBounds(130, 240, 70, 23);

        btnMake.setText("生成");
        btnMake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeActionPerformed(evt);
            }
        });
        getContentPane().add(btnMake);
        btnMake.setBounds(410, 240, 80, 23);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(null);

        jLabel9.setText("Domain继承外部类");
        jPanel4.add(jLabel9);
        jLabel9.setBounds(10, 10, 110, 15);

        txtBaseVO.setEditable(false);
        jPanel4.add(txtBaseVO);
        txtBaseVO.setBounds(120, 10, 320, 21);

        btnChooser.setText("jButton3");
        btnChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooserActionPerformed(evt);
            }
        });
        jPanel4.add(btnChooser);
        btnChooser.setBounds(440, 10, 20, 23);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(20, 190, 500, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectionActionPerformed
        Statement sql = null;
        ResultSet res = null;
        try {
            model = (DefaultTableModel) tbInfo.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            url = "jdbc:mysql://" + txtIP.getText() + ":" + txtPort.getText() + "/" + txtDatabaseName.getText() + "";
            user = txtUser.getText();
            pwd = new String(txtPwd.getPassword());
            connection = DriverManager.getConnection(url, user, pwd);
            sql = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
//            res = sql.executeQuery("show tables");
            res = sql.executeQuery("show table status");
            //取得记录条数
            while (res.next()) {
                Vector v = new Vector();
                v.add(true);
                v.add(res.getString("name"));
                v.add(res.getString("comment"));
                model.addRow(v);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "数据库连接出错");
        } finally {
            try {
                if (res != null) {
                    res.close();
                    res = null;
                }
            } catch (Exception ex) {
            } finally {
                if (sql != null) {
                    try {
                        sql.close();
                        sql = null;
                    } catch (Exception e) {
                    }
                }
            }
        }
    }//GEN-LAST:event_btnConnectionActionPerformed

    private void btnMakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeActionPerformed
        String path = null;
        try {
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "没有内容可生成!");
                return;
            }
            if (chooser == null) {
                chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                chooser.changeToParentDirectory();
            }
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                path = chooser.getSelectedFile().getAbsolutePath() + "\\";
            } else {
                return;
            }
            //con = DriverManager.getConnection(url, user, pwd);
            File fileDao = new File(path + "/src/" + txtDao.getText().replace(".", "/"));
            if (!fileDao.exists()) {
                fileDao.mkdirs();
            }
            File fileDomain = new File(path + "/src/" + txtDomain.getText().replace(".", "/"));
            if (!fileDomain.exists()) {
                fileDomain.mkdirs();
            }
            File fileMapper = new File(path + "/src/" + txtMapper.getText().replace(".", "/"));
            if (!fileMapper.exists()) {
                fileMapper.mkdirs();
            }
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = sdf.format(new Date());
            String baseVOFullName = "";
            String strBaseVOSimpleName = "";
            if (txtBaseVO.getText().trim().length() > 0) {
                StringBuffer sb = new StringBuffer(txtBaseVO.getText().trim());
                baseVOFullName = sb.substring(0, sb.lastIndexOf("."));
                String[] temp = baseVOFullName.split("\\.");
                strBaseVOSimpleName = " extends " + temp[temp.length - 1];
            }
            List<String> baseFiled = new ArrayList<>();

            if (baseVOFullName.length() > 0) {
                URL url1 = new URL("file:" + jarFileChooser.getSelectedFile().getAbsolutePath());
                URLClassLoader myClassLoader1 = new URLClassLoader(new URL[]{url1}, Thread.currentThread()
                        .getContextClassLoader());
                Class<?> cls = myClassLoader1.loadClass(txtBaseVO.getText().substring(0, txtBaseVO.getText().lastIndexOf(".")));
                Method[] methods = cls.getMethods();
                for (Method method : methods) {
                    if (method.getName().startsWith("set") && method.getReturnType() == void.class) {
                        baseFiled.add(method.getName().substring(3));
                    }
                }
            }

            String space4 = "    ";
            String space8 = "        ";
            String space12 = "            ";
            String space16 = "                ";
            makeBaseDao(fileDao);
            for (int i = 0; i < tbInfo.getRowCount(); i++) {
                if (((Boolean) model.getValueAt(i, 0))) {//勾选的才生成
                    String tableName = model.getValueAt(i, 1).toString();
                    String objName = "";//对象名
                    boolean bol1 = true;
                    StringBuffer sbName = new StringBuffer();
                    for (int j = 0; j < tableName.length(); j++) {
                        int value = tableName.charAt(j);
                        if (value == 95) {
                            bol1 = true;
                            continue;
                        }
                        if (value > 96 && value < 123) {//97-122为小写字母
                            if (bol1) {
                                sbName.append(String.valueOf((char) (value - 32)));
                                bol1 = false;
                            } else {
                                sbName.append(String.valueOf((char) value));
                            }
                        } else {
                            sbName.append(String.valueOf((char) value));
                        }
                    }
                    objName = sbName.toString();
                    //获取所有列信息
                    Map<String, BeanInfo> map = new LinkedHashMap<>();
                    Statement sql = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet res = sql.executeQuery("show full Columns from " + model.getValueAt(i, 1));
                    while (res.next()) {//记录字段名,类型,备注等内容
                        String filed = res.getString(1);
                        BeanInfo beanInfo = new BeanInfo();
                        StringBuffer sbFiled = new StringBuffer();
                        bol1 = false;
                        for (int j = 0; j < filed.length(); j++) {
                            int value = filed.charAt(j);
                            if (value == 95) {
                                bol1 = true;
                                continue;
                            }
                            if (value > 96 && value < 123) {//97-122为小写字母
                                if (bol1) {
                                    sbFiled.append(String.valueOf((char) (value - 32)));
                                    bol1 = false;
                                } else {
                                    sbFiled.append(String.valueOf((char) value));
                                }
                            } else {
                                sbFiled.append(String.valueOf((char) value));
                            }
                        }
                        beanInfo.setFiled(sbFiled.toString());
                        String str = res.getString(2);
                        if (str.startsWith("varchar")) {
                            beanInfo.setType("String");
                        } else if (str.startsWith("text")) {
                            beanInfo.setType("String");
                        } else if (str.startsWith("datetime")) {
                            beanInfo.setType("Date");
                        } else if (str.startsWith("date")) {
                            beanInfo.setType("Date");
                        } else if (str.startsWith("timestamp")) {
                            beanInfo.setType("Date");
                        } else if (str.startsWith("int")) {
                            beanInfo.setType("Integer");
                        } else if (str.startsWith("bigint")) {
                            beanInfo.setType("Long");
                        } else if (str.startsWith("smallint")) {
                            beanInfo.setType("Integer");
                        } else if (str.startsWith("double")) {
                            beanInfo.setType("Double");
                        } else {
                            beanInfo.setType("String");
                        }
                        //备注信息
                        String comment = res.getString(9);
                        if (comment.startsWith("/*") && comment.endsWith("*/")) {
                            String temp = comment.substring(2);
                            comment = temp.substring(0, temp.length() - 2);
                        }
                        beanInfo.setComment(comment);
                        map.put(filed, beanInfo);
                    }
                    //生成Domain对象
                    String strDomainName = objName + "DO";
                    String domainFullName = new StringBuffer(txtDomain.getText()).append(".").append(strDomainName).toString();
                    StringBuffer sbDomain = new StringBuffer();
                    sbDomain.append(title);
                    sbDomain.append("package ").append(txtDomain.getText()).append(";\n\n");
                    sbDomain.append("import java.util.Date;\n");
                    if (baseVOFullName != null && baseVOFullName.length() > 0) {
                        sbDomain.append("import ").append(baseVOFullName).append(";\n");
                    }
                    sbDomain.append("/**\n * ").append("");
                    if (model.getValueAt(i, 2) != null) {
                        sbDomain.append(model.getValueAt(i, 2));
                    }
                    sbDomain.append("\n * @author dobob09\n * @since ").append(dateTime).append("\n *\n */");
                    sbDomain.append("\npublic class ").append(strDomainName).append(strBaseVOSimpleName).append(" {\n\n");
                    sbDomain.append("    private static final long serialVersionUID = ").append(new Random().nextInt(10000)).append(System.currentTimeMillis()).append("L").append(";\n");
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        boolean bol = false;
                        for (int k = 0; k < baseFiled.size(); k++) {
                            if (baseFiled.get(k).equalsIgnoreCase(entry.getValue().getFiled())) {
                                bol = true;
                                break;
                            }
                        }
                        if (bol) {
                            continue;
                        }
                        sbDomain.append("    /**\n    * ").append(entry.getValue().getComment()).append("\n    */\n");
                        sbDomain.append("    private ").append(entry.getValue().getType()).append(" ").append(entry.getValue().getFiled()).append(";\n");
                    }
                    sbDomain.append("\n");
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        boolean bol = false;
                        for (int k = 0; k < baseFiled.size(); k++) {
                            if (baseFiled.get(k).equalsIgnoreCase(entry.getValue().getFiled())) {
                                bol = true;
                                break;
                            }
                        }
                        if (bol) {
                            continue;
                        }
                        StringBuilder filed = new StringBuilder(entry.getValue().getFiled());
                        sbDomain.append("    /**\n    * ").append(entry.getValue().getComment()).append("\n    */\n");
                        sbDomain.append("    public ").append(entry.getValue().getType());
                        sbDomain.append(" get").append(filed.substring(0, 1).toUpperCase()).append(filed.substring(1));
                        sbDomain.append("() {\n");
                        sbDomain.append("        return this.").append(filed).append(";\t\n    }\n");

                        sbDomain.append("    /**\n    * ").append(entry.getValue().getComment()).append("\n    */\n");
                        sbDomain.append("    public void set").append(filed.substring(0, 1).toUpperCase()).append(filed.substring(1));
                        sbDomain.append("(").append(entry.getValue().getType()).append(" ").append(filed).append(")");
                        sbDomain.append(" {\n");
                        sbDomain.append("        this.").append(filed).append(" = ").append(filed).append(";\t\n    }\n");
                    }
                    sbDomain.append("}");

                    fileDomain = new File(path + "/src/" + txtDomain.getText().replace(".", "/"));
                    if (!fileDomain.exists()) {
                        fileDomain.mkdirs();
                    }
                    File f = new File(fileDomain.getAbsolutePath() + "/" + strDomainName + ".java");
                    f.createNewFile();
//                    try (FileWriter fw = new FileWriter(f)) {
//                        fw.write(sbDomain.toString());
//                        fw.flush();
//                    }
                    try (OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(f), "UTF-8")) {
                        out.write(sbDomain.toString().toCharArray());
                        out.flush();
                    }

                    //生成Dao对象
                    StringBuffer sbDao = new StringBuffer();
                    String strDaoName = objName + "DAO";
                    sbDao.append(title);
                    sbDao.append("package ").append(txtDao.getText()).append(";\n\n");
                    sbDao.append("import ").append(domainFullName).append(";\n");
                    sbDao.append("/**\n * \n * @author dobob09\n * @since ").append(dateTime).append("\n *\n */\n");
                    sbDao.append("public interface ").append(strDaoName).append(" extends ").append(BASE_DAO_NAME).append("<").append(strDomainName).append("> {\n\n");
                    sbDao.append("}");

                    fileDao = new File(path + "/src/" + txtDao.getText().replace(".", "/"));
                    if (!fileDao.exists()) {
                        fileDao.mkdirs();
                    }
                    f = new File(fileDao.getAbsolutePath() + "/" + strDaoName + ".java");
                    f.createNewFile();
//                    try (FileWriter fw = new FileWriter(f)) {
//                        fw.write(sbDao.toString());
//                        fw.flush();
//                    }
                    try (OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(f), "UTF-8")) {
                        out.write(sbDao.toString().toCharArray());
                        out.flush();
                    }

                    StringBuffer sbxml = new StringBuffer();
                    sbxml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
                    sbxml.append("<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n");
                    sbxml.append("<mapper namespace=\"").append(txtDao.getText()).append(".").append(strDaoName).append("\">\n");
                    sbxml.append(space4).append("<sql id=\"baseColumnList\">\n");
                    StringBuffer temp = new StringBuffer();
                    StringBuffer sbInsert = new StringBuffer();
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        sbInsert.append(",").append(entry.getKey());
                        if (Objects.equals(entry.getKey(), entry.getValue().getFiled())) {
                            temp.append(",").append(entry.getKey());
                        } else {
                            temp.append(",").append(entry.getKey()).append(" as ").append(entry.getValue().getFiled());
                        }
                    }
                    sbxml.append(space8);
                    sbxml.append(temp.substring(1)).append("\n").append(space4).append("</sql>\n");
                    //新增
                    sbxml.append(space4).append("<insert id=\"insert\" parameterType=\"");
                    sbxml.append(domainFullName).append("\" flushCache=\"false\">\n");

                    sbxml.append(space8).append("INSERT INTO ").append(tableName).append(" (").append(sbInsert.substring(1)).append(")\n");
                    sbxml.append(space12).append("VALUES (");
                    StringBuffer temp2 = new StringBuffer();
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        temp2.append(",#{").append(entry.getValue().getFiled()).append("}");
                    }
                    sbxml.append(temp2.substring(1)).append(")\n");
                    sbxml.append(space8).append("<selectKey keyProperty=\"id\" resultType=\"java.lang.Long\">\n");
                    sbxml.append(space12).append("select LAST_INSERT_ID() as value\n");
                    sbxml.append(space8).append("</selectKey>");
                    sbxml.append(space4).append("</insert>\n");
                    //删除
                    sbxml.append(space4).append("<delete id=\"delete\" flushCache=\"false\">\n");
                    sbxml.append(space8).append("DELETE FROM ").append(tableName);
                    sbxml.append(" WHERE id = #{id}\n").append(space4).append("</delete>\n");//TODO id

                    //修改--update
                    sbxml.append(space4).append("<update id=\"update\" parameterType=\"");
                    sbxml.append(domainFullName).append("\" flushCache=\"false\">\n");
                    sbxml.append(space8).append("UPDATE ").append(tableName).append("\n");
                    sbxml.append(space8).append("<set>\n");
                    StringBuffer sbxml_update = new StringBuffer();
                    map.entrySet().stream().forEach((entry) -> {
                        sbxml_update.append(space12).append(entry.getKey()).append(" = #{").append(entry.getValue().getFiled()).append("},\n");
                    });
                    sbxml.append(sbxml_update.substring(0, sbxml_update.length() - 2)).append("\n");
                    sbxml.append(space8).append("</set>\n");
                    sbxml.append(space8).append("WHERE id =").append(" #{id}\n");
                    sbxml.append(space4).append("</update>\n");

                    //修改--updateSelective
                    sbxml.append(space4).append("<update id=\"updateSelective\" parameterType=\"");
                    sbxml.append(domainFullName).append("\" flushCache=\"false\">\n");
                    sbxml.append(space8).append("UPDATE ").append(tableName).append("\n");
                    sbxml.append(space8).append("<set>\n");
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        sbxml.append(space12).append("<if test=\"").append(entry.getValue().getFiled()).append(" != null\">\n");
                        sbxml.append(space16).append(entry.getKey()).append(" = #{").append(entry.getValue().getFiled()).append("},\n");
                        sbxml.append(space12).append("</if>\n");
                    }
                    sbxml.append(space8).append("</set>\n");
                    sbxml.append(space8).append("WHERE id =").append(" #{id}\n");
                    sbxml.append(space4).append("</update>\n");

                    //findById
                    sbxml.append(space4).append("<select id=\"findById\" resultType=\"");
                    sbxml.append(domainFullName).append("\" useCache=\"false\">\n");
                    sbxml.append(space8).append("SELECT <include refid=\"baseColumnList\" /> FROM ").append(tableName).append(" WHERE id ");
                    sbxml.append(" = #{id}");
                    sbxml.append("\n").append(space4).append("</select>\n");

                    //listByDO
                    sbxml.append(space4).append("<select id=\"listByDO\" parameterType=\"").append(domainFullName).append("\" ");
                    sbxml.append(" resultType=\"").append(domainFullName).append("\"");
                    sbxml.append(" useCache=\"false\">\n");
                    sbxml.append(space8).append("SELECT <include refid=\"baseColumnList\" /> FROM ").append(tableName).append("\n");
                    sbxml.append(space8).append("<where>\n");
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        String filed = entry.getKey();
                        String beanFiled = entry.getValue().getFiled();
                        Object type = entry.getValue().getType();
                        if ("String".equals(type) && filed.endsWith("Id")) {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null and ").append(beanFiled).append(" != '' \">").append("\n");
                            sbxml.append(space16).append(" AND ").append(filed).append(" = #{").append(beanFiled).append("}").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        } else if ("String".equals(type)) {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null and ").append(beanFiled).append(" != '' \">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" = #{").append(beanFiled).append("}").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        } else {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null\">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" = #{").append(beanFiled).append("}").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        }
                    }
                    sbxml.append(space8).append("</where>").append("\n");
                    sbxml.append("\n").append(space4).append("</select>\n");
                    //query
                    sbxml.append(space4).append("<select id=\"query\" parameterType=\"map\" resultType=\"");
                    sbxml.append(domainFullName).append("\" useCache=\"false\">\n");
                    sbxml.append(space8).append("SELECT <include refid=\"baseColumnList\" /> FROM ").append(tableName).append("\n");
                    sbxml.append(space8).append("<where>\n");
                    for (Map.Entry<String, BeanInfo> entry : map.entrySet()) {
                        String filed = entry.getKey();
                        String beanFiled = entry.getValue().getFiled();
                        Object type = entry.getValue().getType();
                        if ("String".equals(type) && filed.endsWith("Id")) {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null and ").append(beanFiled).append(" != '' \">").append("\n");
                            sbxml.append(space16).append(" AND ").append(filed).append(" = #{").append(beanFiled).append("}").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        } else if ("String".equals(type)) {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null and ").append(beanFiled).append(" != '' \">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" LIKE CONCAT('%',#{").append(beanFiled).append("},'%')").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        } else if ("Integer".equals(type) || "Double".equals(type) || "Long".equals(type)) {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null\">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" = #{").append(beanFiled).append("}").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        } else if ("Date".equals(type)) {
                            String filedDateStart = beanFiled + "Start";
                            String filedDateEnd = beanFiled + "End";
                            sbxml.append(space12).append("<if test=\"").append(filedDateStart).append(" != null\">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" <![CDATA[ >= #{").append(filedDateStart).append("} ]]>").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                            sbxml.append(space12).append("<if test=\"").append(filedDateEnd).append(" != null\">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" <![CDATA[ <= #{").append(filedDateEnd).append("} ]]>").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        } else {
                            sbxml.append(space12).append("<if test=\"").append(beanFiled).append(" != null and ").append(beanFiled).append(" != '' \">").append("\n");
                            sbxml.append(space16).append("AND ").append(filed).append(" = #{").append(filed).append("}").append("\n");
                            sbxml.append(space12).append("</if>").append("\n");
                        }
                    }

                    sbxml.append(space8).append("</where>").append("\n");
                    sbxml.append(space4).append("</select>\n");
                    sbxml.append("</mapper>");

                    fileMapper = new File(path + "/src/" + txtMapper.getText().replace(".", "/"));
                    if (!fileMapper.exists()) {
                        fileMapper.mkdirs();
                    }
                    f = new File(fileMapper.getAbsolutePath() + "/" + objName + "-mapper.xml");
                    f.createNewFile();

                    try (OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(f), "UTF-8")) {
                        out.write(sbxml.toString().toCharArray());
                        out.flush();
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "OK!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_btnMakeActionPerformed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(true, i, 0);
        }
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnInvertSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertSelectActionPerformed
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(!((Boolean) model.getValueAt(i, 0)), i, 0);
        }
    }//GEN-LAST:event_btnInvertSelectActionPerformed
    JFileChooser jarFileChooser;
    DefaultMutableTreeNode treeRoot;
    private void btnChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooserActionPerformed
        if (jarFileChooser == null) {
            jarFileChooser = new JFileChooser();
            FileFilter filter = new FileNameExtensionFilter("jar文件", "jar");
            jarFileChooser.setFileFilter(filter);
            jarFileChooser.setMultiSelectionEnabled(false);
            jarFileChooser.changeToParentDirectory();
        }
        if (jarFileChooser.showOpenDialog(this) == JFileChooser.OPEN_DIALOG) {
            File file = jarFileChooser.getSelectedFile();
            if (file.getName().toLowerCase().endsWith(".jar")) {
                try {
                    UserObject userObject = new UserObject("", file.getName());
                    treeRoot = new DefaultMutableTreeNode(userObject);
                    TreeModel treeModel = new DefaultTreeModel(treeRoot);
                    jarTree.setModel(treeModel);

                    JarFile jarFile = new JarFile(file);
                    Enumeration<JarEntry> ee = jarFile.entries();
                    List<String> ls = new ArrayList<>();
                    Map<String, DefaultMutableTreeNode> map = new LinkedHashMap<>();
                    while (ee.hasMoreElements()) {
                        JarEntry entry = (JarEntry) ee.nextElement();
                        System.out.println(entry.getName());
                        if (entry.isDirectory()) {
                            if (entry.getName().startsWith("META-INF")) {
                                continue;
                            }
                            DefaultMutableTreeNode node = new DefaultMutableTreeNode(entry.getName());
                            treeRoot.add(node);
                            map.put(entry.getName(), node);

                            //addDirToTree(root, entry.getName());
                        } else if (entry.getName().endsWith(".class") && !entry.getName().contains("$")) {
                            ls.add(entry.getName());
                        }
                    }
                    ls.stream().forEach((str) -> {
                        String path = str.substring(0, str.lastIndexOf("/") + 1);
                        addNode(str, map.get(path));
                    });
                    Enumeration children = treeRoot.children();
                    List<DefaultMutableTreeNode> lsNode = new ArrayList<>();
                    while (children.hasMoreElements()) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) children.nextElement();
                        lsNode.add(node);
                    }
                    for (int i = lsNode.size() - 1; i >= 0; i--) {
                        if (lsNode.get(i).getChildCount() == 0) {
                            treeRoot.remove(lsNode.get(i));
                        }
                    }
                    jDialog1.setTitle(file.getName());
                    jDialog1.setVisible(true);
                    jarTree.expandRow(2);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "jar出错");
                }
            } else if (file.getName().toLowerCase().endsWith(".class")) {
                txtBaseVO.setText(file.getAbsolutePath());

            } else {
                JOptionPane.showMessageDialog(this, "请选择编译好Java类文件或者jar文件！");
            }
        }
    }//GEN-LAST:event_btnChooserActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.jDialog1.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jarTree.getLastSelectedPathComponent();
        if (node.getUserObject().toString().endsWith(".class")) {
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
            txtBaseVO.setText(parent.getUserObject().toString().replaceAll("/", ".") + node.getUserObject());
            this.jDialog1.setVisible(false);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChooser;
    private javax.swing.JButton btnConnection;
    private javax.swing.JButton btnInvertSelect;
    private javax.swing.JButton btnMake;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jarTree;
    private javax.swing.JTable tbInfo;
    private javax.swing.JTextField txtBaseVO;
    private javax.swing.JTextField txtDao;
    private javax.swing.JTextField txtDatabaseName;
    private javax.swing.JTextField txtDomain;
    private javax.swing.JFormattedTextField txtIP;
    private javax.swing.JTextField txtMapper;
    private javax.swing.JFormattedTextField txtPort;
    private javax.swing.JPasswordField txtPwd;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            try {
                if (connection != null) {
                    connection.close();
                    System.out.println("关闭连接");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
        super.processWindowEvent(e);
    }

    void addNode(String nodeName, DefaultMutableTreeNode node) {
        node.add(new DefaultMutableTreeNode(nodeName.substring(nodeName.lastIndexOf("/") + 1)));
    }
//    boolean isHasTreeNode(String nodeName) {
//        String[] path = nodeName.split("/");
//        Enumeration enumer = root.children();
//        while(enumer.hasMoreElements()) {
//            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumer.nextElement();
//            if (path[0].equals(node.getUserObject())){
//                node
//            }
//        }
//        return false;
//    }

    private void addDirToTree(DefaultMutableTreeNode node, String name) {
        String[] path = name.split("/");
        Enumeration children = node.children();
        boolean bol = true;
        DefaultMutableTreeNode nchild = null;
        while (children.hasMoreElements()) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
            UserObject userObject = (UserObject) child.getUserObject();
            if (userObject.getName().equals(path[0])) {
                bol = false;
                nchild = new DefaultMutableTreeNode(userObject);
                break;
            }
        }
        if (bol) {
            UserObject userObject = new UserObject(((UserObject) node.getUserObject()).getPath() + "/" + path[0], path[0]);
            nchild = new DefaultMutableTreeNode(userObject);
            node.add(nchild);
        }
        if (path.length > 1) {
            StringBuffer sbPath = new StringBuffer();
            for (int i = 1; i < path.length; i++) {
                sbPath.append("/").append(path[i]);
            }
            addDirToTree(nchild, sbPath.substring(1));
        }
    }

    private void makeBaseDao(File fileDao) throws IOException {
        String daoFile = "package " + txtDao.getText() + ";\n"
                + "\n"
                + "import java.util.List;\n"
                + "import java.util.Map;\n"
                + "\n"
                + "import org.apache.ibatis.annotations.Param;\n"
                + "\n"
                + "/**\n"
                + " * <p>Mybatis 基础DAO </p> \n"
                + " *\n"
                + " * @author: dobob09\n"
                + " */\n"
                + "public interface BaseDAO<T> {\n"
                + "	\n"
                + "	/**\n"
                + "	 * <p>保存实体对象</p> \n"
                + "	 * @param obj \n"
                + "	 * @throws\n"
                + "	 */\n"
                + "	void insert(T object);\n"
                + "   \n"
                + "   /**\n"
                + "    * 删除指定id的实体对象\n"
                + "    * @param id\n"
                + "    */\n"
                + "	int delete(@Param(\"id\") String id);\n"
                + "  \n"
                + "   /**\n"
                + "    * 更新的实体对象\n"
                + "    * @param id\n"
                + "    * @param obj\n"
                + "    */\n"
                + "	int update(T object);\n"
                + "\n"
                + "   /**\n"
                + "    * 返回所有持久化对象\n"
                + "    * @return\n"
                + "    */\n"
                + "	List<T> query(Map<String, Object> paramMap);\n"
                + "      \n"
                + "   /**\n"
                + "    * 返回一个持久化对象\n"
                + "    * @param id\n"
                + "    * @return\n"
                + "    */\n"
                + "	T findById(@Param(\"id\") String id);\n "
                + "\n"
                + "    /**\n"
                + "     * 返回持久化对象列表(不包含like)\n"
                + "     */\n"
                + "    List<T> listByDO(T param);\n"
                + "}";
        File f = new File(fileDao.getAbsolutePath() + "/" + BASE_DAO_NAME + ".java");
        f.createNewFile();
        try (OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(f), "UTF-8")) {
            out.write(daoFile.toCharArray());
            out.flush();
        }
    }
}
